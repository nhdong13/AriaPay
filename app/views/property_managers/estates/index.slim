main#estates.main.pointer-event role="main" 
  .content.container-fluid
    .page-header.pb-4
      .row.align-items-center
        .col-sm
          h1.page-header-title Estates
        .col-sm-auto
          a.btn.btn-primary.px-4 data-toggle="modal" href="javascript:;" data-target="#newEstateModal"
            | New Estate
    .row.gx-2.gx-lg-3
      - @estates.each do |estate|
        .col-sm-6.col-lg-4.mb-3.mb-lg-5
          .card.h-100
            .card-body.p-3
              - if estate.logo.present?
                = image_tag(url_for(estate.logo), class: "logo")
              .card-pinned.float-btn
                a.btn.btn-icon.btn-sm.btn-ghost-secondary.rounded-circle href="javascript:;" 
                  i.tio-more-horizontal
              h3.text-dark.font-weight-bolder.mt-7
                = estate.name
              p.location.font-weight-bolder.text-muted.mb-5.d-flex.align-items-center
                i.custom-map-marker.mr-1
                = estate.address
              a.card-link.float-right href="#{property_managers_estate_path(1)}"
                | View Estates
                i.tio-lg.tio-arrow-forward.ml-1

    = render "property_managers/estates/new_estate_modal"

script async="" defer="defer" src="https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_PLACES_API']}&libraries=places&callback=initAutocomplete"
javascript:
  var sidebar = $('.js-navbar-vertical-aside').hsSideNav();

  let autocomplete;
  let address1Field;
  let postalField;

  function initAutocomplete() {
    address1Field = document.querySelector("#estate_address");
    postalField = document.querySelector("#estate_postcode");

    autocomplete = new google.maps.places.Autocomplete(address1Field, {
      fields: ["address_components", "geometry"],
      types: ["address"],
    });
    address1Field.focus();
    autocomplete.addListener("place_changed", fillInAddress);
  }

  function fillInAddress() {
    const place = autocomplete.getPlace();
    let address1 = "";
    let postcode = "";
    
    if (place.geometry && place.geometry.location) {
      document.querySelector("#estate_latitude").value = place.geometry.location.lat();
      document.querySelector("#estate_longitude").value = place.geometry.location.lng();
    }

    for (const component of place.address_components) {
      const componentType = component.types[0];
      switch (componentType) {
        case "street_number": {
          address1 = `${component.long_name} ${address1}`;
          break;
        }

        case "route": {
          address1 += component.short_name;
          break;
        }

        case "postal_code": {
          postcode = `${component.long_name}${postcode}`;
          break;
        }

        case "postal_code_suffix": {
          postcode = `${postcode}-${component.long_name}`;
          break;
        }

        case "locality": {
          document.querySelector("#estate_city").value = component.long_name;
          break;
        }

        case "country": {
          document.querySelector("#estate_country").value = component.long_name;
          break;
        }
      }
    }

    address1Field.value = address1;
    postalField.value = postcode;
  }
